#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>
using namespace std;

vector<pair<double, double>>v;
// tmp 같은 용도
vector<pair<double, pair<int, int>>> dist;
// 실제 계산하는데 쓰일 용도
// double은 거리이고 각 점끼리 계산한다.
int parent[102];

double cal(double x1, double y1, double x2, double y2) {
	double x = pow(x1 - x2, 2);
	double y = pow(y1 - y2, 2);

	return sqrt(x + y);
}

int find(int x) {
	if (parent[x] == x) {
		return x;
	}
	else return parent[x] = find(parent[x]);
}

int main() {
	int n;
	cin >> n;

	for (int i = 0; i < n; i++)
	{
		double a, b;
		cin >> a >> b;

		v.push_back({ a,b });
	}
	for (int i = 1; i <= n; i++) {
		parent[i] = i;
	}
	for (int i = 0; i < n - 1; i++) {
		for (int j = i + 1; j < n; j++) {
			double r = cal(v[i].first, v[i].second, v[j].first, v[j].second);
			dist.push_back({ r,{i,j} });
			// 첫 번째 점과 두 번째 점의 거리를 계산 후 대입
			// 그리고 1,2 이렇게 연결된 점으로 바꿔준다.
		}
	}
	sort(dist.begin(), dist.end());
	// 오름차순 정렬 (r)
	double distance=0;

	for (int i = 0; i < dist.size(); i++) {
		int tmpx = dist[i].second.first;
		int tmpy = dist[i].second.second;
		double tmpr = dist[i].first;

		int a = find(tmpx);
		int b = find(tmpy);

		if (a != b) {
			parent[a] = b;
			distance += tmpr;
		}
	}
	cout.precision(3);
	cout << distance;
	return 0;
}

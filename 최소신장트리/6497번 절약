#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;


int parent[200000];

int find(int x) {
	if (parent[x] == x) {
		return x;
	}
	return parent[x] = find(parent[x]);
}

int main() {

	cin.tie(NULL);
	ios_base::sync_with_stdio(false);

	while (true) {
		vector<pair<int, pair<int, int>>> v;
		int m, n;
		cin >> m >> n;
		int sum = 0; // 총 전력

		if (m == 0 && n == 0) {
			break;
		}

		for (int i = 0; i < n; i++) {
			parent[i] = i;
		}
		// 각 점은 자신을 최정점

		for (int i = 0; i < n; i++) {
			int a, b, c;
			cin >> a >> b >> c;
			v.push_back({ c,{a,b} });
			sum += c;
		}
		sort(v.begin(), v.end());

		int cnt = 0;
		for (int i = 0; i < v.size(); i++) {
			int tmpx = v[i].second.first;
			int tmpy = v[i].second.second;
			int dist = v[i].first;

			int x = find(tmpx);
			int y = find(tmpy);

			if (x != y) {
				cnt += dist;
				if (x < y) {
					parent[y] = x;
					// 더 작으므로
				}
				else {
					parent[x] = y;
				}

			}
		}
		cout << sum - cnt << endl;
	}
	return 0;
}

#include <iostream>
#include <queue>
using namespace std;

int m, n;
int Array[1000][1000];
bool checkArray[1000][1000];
int dx[4] = { 1,-1,0,0 };
int dy[4] = { 0,0,1,-1 };
queue<pair<int, int>> q;


void bfs() {
	while (!q.empty()) {
		int tmpy = q.front().first;
		int tmpx = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int ny = tmpy + dy[i];
			int nx = tmpx + dx[i];
			if (ny < 0 || nx < 0 || ny >= n || nx >= m) {
				continue;
			}
			if (!checkArray[ny][nx] && Array[ny][nx] == 0) {
				q.push({ ny,nx });
				checkArray[ny][nx] = true;
				Array[ny][nx] = Array[tmpy][tmpx] + 1;
			}
		}
	}
	
}

int main() {
	cin >> m >> n;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> Array[i][j];
		}
	}
	
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if ( Array[i][j] == 1) {
				q.push({ i,j });
			}
		}
	}
	bfs();
	int cnt = -1;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (Array[i][j] == 0&&!checkArray[i][j]) {
				cout << "-1\n";
				return 0;
			}
			if (cnt < Array[i][j]) {
				cnt = Array[i][j];
			}
		}
	}
	cout << cnt-1;
	return 0;
}

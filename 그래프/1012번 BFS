#include <iostream>
#include <queue>
using namespace std;

int m, n;
int Array[50][50];


void bfs(int a, int b) {
	queue<pair<int,int>> q;
	q.push({ a,b });
	Array[a][b] = 0;

	int dx[4] = { -1,1,0,0 };
	int dy[4] = { 0,0,-1,1 };

	while (!q.empty()) {
		int x = q.front().first;
		int y = q.front().second;
		q.pop();
		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (nx >= 0 && nx < m && ny >= 0 && ny < n &&
				Array[nx][ny] == 1) {
				q.push({ nx,ny });
				Array[nx][ny] = 0;
			}
		}
	}
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	int t;
	cin >> t;
	int k, cnt = 0;
	while (t--) {
		cnt = 0;

		cin >> m >> n >> k;

		for (int i = 0; i < k; i++) {
			int a, b;
			cin >> a >> b;
			Array[a][b] = 1;
		}
		for (int i = 0; i < m; i++) {	
			for (int j = 0; j < n; j++) {
				if (  Array[i][j] == 1) {
					cnt++;
					bfs(i, j);
				}
			}
		}
		cout << cnt << "\n";
	}
	return 0;
}

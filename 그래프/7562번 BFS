#include <iostream>
#include <queue>
using namespace std;

int Array[301][301];
int destX, destY, n;
int dx[8] = { -2,-1,-2,-1,2,1,2,1 };
int dy[8] = { 1,2,-1,-2,1,2,-1,-2 };
int visited[301][301];
queue<pair<int, int>>q;

void bfs(int x, int y) {

	q.push({ x,y });
	visited[x][y] = true;

	while (!q.empty()) {
		int tmpx = q.front().first;
		int tmpy = q.front().second;
		q.pop();
		if (tmpx == destX && tmpy == destY) {
			cout << Array[tmpx][tmpy] << "\n";
			while (!q.empty()) {
				q.pop();

			}
			break;
		}
		for (int i = 0; i < 8; i++) {
			int nx = tmpx + dx[i];
			int ny = tmpy + dy[i];
			if (nx >= 0 && nx < n && ny >= 0 && ny < n && visited[nx][ny] == false) {
				visited[nx][ny] = true;
				Array[nx][ny] = Array[tmpx][tmpy] + 1;
				q.push({ nx,ny });
			}
		}
	}
}
void reset() {
	while (!q.empty()) {
		q.pop();
	}
	for (int i = 0; i < 301; i++) {
		for (int j = 0; j < 301; j++) {
			visited[i][j] = 0;
			Array[i][j] = 0;
		}
	}
}

int main() {
	int t;
	cin >> t;
	while (t--) {
		cin >> n;
		int x, y; // 시작위치
		//도착 위치
		cin >> x >> y;
		cin >> destX >> destY;
		bfs(x, y);
		reset();
	}
	return 0;
}

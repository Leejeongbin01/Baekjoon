#include <iostream>
#include <queue>
using namespace std;

int n, m, x, y;
int board[1002][1002];
int ans[1002][1002];
int dx[] = { -1,1,0,0 };
int dy[] = { 0,0,-1,1 };
bool visit[1002][1002];

void bfs(int a, int b) {
	queue<pair<int, int>> q;
	q.push({ a,b });


	while (!q.empty()) {
		int tmpx = q.front().first;
		int tmpy = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nx = tmpx + dx[i];
			int ny = tmpy + dy[i];
			if (nx < 0 || ny < 0 || nx >= n || ny >= m) {
				continue;
			}
			if (board[nx][ny] == 0) {
				continue;
			}
			if (ans[nx][ny] != -1) {
				continue;
			}
		
			ans[nx][ny] = ans[tmpx][tmpy] + 1;
			q.push({ nx,ny });
		}
	}
}

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	cin >> n >> m;

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			ans[i][j] = -1;
		}
	}

	
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> board[i][j];
			if (board[i][j] == 2) {
				x = i;
				y = j;
				ans[i][j] = 0;
			}
		}
	}
	bfs(x, y);

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (board[i][j] == 0) {
				cout << "0" << " ";
				continue;
			}
			cout << ans[i][j] << " ";
		}
		cout << endl;
	}
	return 0;
}

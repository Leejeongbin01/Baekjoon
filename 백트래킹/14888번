#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector<int> numV;
vector<int> oprV;
vector<int> resultV;
int n,sum;

//void dfs() {
//	int tmpN = oprV.size();
//	for (int i = 0; i < n; i++) {
//		int checkNum = 0;
//		int tmp = 0;
//		while (tmpN--) {
//			if (oprV[checkNum] == 1) {
//				tmp += numV[i];
//			}
//			else if (oprV[checkNum] == 2) {
//				tmp -= numV[i];
//			}
//			else if (oprV[checkNum] == 3) {
//				tmp *= numV[i];
//			}
//			else if (oprV[checkNum] == 4) {
//				tmp /= numV[i];
//			}
//			checkNum++;
//		}
//		resultV.push_back(tmp);
//	}
//}

void dfs() {
	int sum = 0;
	sort(oprV.begin(), oprV.end());
	do {
		sum = numV[0];
		for (int i = 0; i < oprV.size()+1; i++) {
			if (oprV[i] == 1) {
				sum += numV[i + 1];
			}
			else if (oprV[i] == 2) {
				sum -= numV[i + 1];
			}
			else if (oprV[i] == 3) {
				sum *= numV[i + 1];
			}
			else if (oprV[i] == 4) {
				sum /= numV[i + 1];
			}
		}
		resultV.push_back(sum);
	} while (next_permutation(oprV.begin(), oprV.end()));
}

int main() {
	int opr;
	cin >> n;
	for (int i = 0; i < n; i++) {
		int a;
		cin >> a;
		numV.push_back(a);
	}
	// 넘버를 다 넣음

	for (int i = 0; i < 4; i++) {
		cin >> opr;
		for (int j = 0; j < opr; j++) {
			if (i == 0) {
				oprV.push_back(1);
			}
			else if (i == 1) {
				oprV.push_back(2);
			}
			else if (i == 2) {
				oprV.push_back(3);
			}
			else if(i==3) {
				oprV.push_back(4);
			}
		}
	}
	// 연산자 벡터에 값을 다 넣음
	// 백트래킹 함수를 호출해서 oprV의 순서를 돌려주면됨
	dfs();
	sort(resultV.begin(), resultV.end());
	cout << resultV.back() << "\n" << resultV[0];
	return 0;
}

#include <iostream>
#include <vector>
using namespace std;

int n, m;
vector<int> v[501];
bool visit[501];
int idx = 0;

bool dfs(int x, int y) {
	if (visit[x] == true) {
		return false;
	}
	visit[x] = true;

	for (int i = 0; i < v[x].size(); i++) {
		int tmpx = v[x][i];
		if (tmpx == y) {
			continue;
		}
		if (dfs(tmpx, x) == false) {
			return false;
		}
	}
	return true;
}

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);

	while (true) {
		cin >> n >> m;
		idx++;
		int ans = 0;
		if (n == 0 && m == 0) {
			break;
		}
		for (int i = 1; i <= n; i++) {
			visit[i] = false;
			v[i].clear();
		}
		for (int i = 0; i < m; i++) {
			int a, b;
			cin >> a >> b;

			v[a].push_back(b);
			v[b].push_back(a);
		}
		for (int i = 1; i <= n; i++) {
			if (!visit[i]) {
				if (dfs(i, 0)) {
					ans++;
				}
			}
		}
		cout << "Case " << idx << ": ";
		if (ans > 1) {
			cout << "A forest of " << ans << " trees.\n";
		}
		else if (ans == 1) {
			cout << "There is one tree.\n";
		}
		else if(ans==0){
			cout << "No trees.\n";
		}
	}
	return 0;
}

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int ans = 0;
int node;
vector<pair<int, int>> v[10001];
bool visit[10001];

void dfs(int x, int dist) {
	visit[x] = true;

	if (dist > ans) {
		ans = dist;
		node = x;
	}

	for (int i = 0; i < v[x].size(); i++) {
		int tmpx = v[x][i].first;
		int tmpdist = v[x][i].second+dist;
		if (!visit[tmpx]) {
			visit[tmpx] = true;
			dfs(tmpx, tmpdist);
		}
	}
}

int main() {
	int n;
	cin >> n;

	for (int i = 1; i < n; i++) {
		int a, b, c;
		cin >> a >> b >> c;

		v[a].push_back({ b,c });
		v[b].push_back({ a,c });
	}
	dfs(1, 0);
	// 1은 첫 노드, 0은 가중치
	// 가장 긴 점에서 가장 먼점 찾기
	for (int i = 1; i <= n; i++) {
		visit[i] = false;
	}
	dfs(node, 0);
	cout << ans;
	return 0;
}

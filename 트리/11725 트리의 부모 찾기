#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

vector<int> v[100001];
bool visited[100001];
int result[100001];

void bfs(int x) {
	queue<int> q;
	q.push(x);
	visited[x] = true;

	while (!q.empty()) {
		int x = q.front();
		q.pop();
		for (int i = 0; i < v[x].size(); i++) {
			int tmpx = v[x][i]; // 4
			if (!visited[tmpx]) {
				visited[tmpx] = true;
				result[tmpx]=x;
				q.push(tmpx);
			}
		}
	}
}

int main() {
	int n;
	cin >> n;

	for (int i = 0; i < n - 1; i++) {
		int a, b;
		cin >> a >> b;
		v[a].push_back(b);
		v[b].push_back(a);
	}
	for (int i = 1; i <= n; i++) {
		sort(v[i].begin(), v[i].end());
	}
	bfs(1);

	for (int i = 2; i <= n; i++) {
		cout << result[i] << "\n";
	}
	return 0;
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

vector<int> v1[1001];
int visited_dfs[10001] = { 0, };
int visited_bfs[10001] = { 0, };
vector<int> result_dfs;
vector<int> result_bfs;

void dfs(int x)
{
	if (visited_dfs[x] == 1)
	{
		return;
	}
	visited_dfs[x] = 1;
	
	result_dfs.push_back(x);

	for (int i = 0; i < v1[x].size(); i++)
	{
		dfs(v1[x][i]);
	}
}

void bfs(int x)
{
	queue<int> q1;
	visited_bfs[x] = 1;
	q1.push(x);

	while (!q1.empty())
	{
		int tmp = q1.front();
		q1.pop();
		result_bfs.push_back(tmp);
		for (int i = 0; i < v1[tmp].size(); i++)
		{
			int y = v1[tmp][i];

			if (!visited_bfs[y])
				//방문한 적이 없는 경ㅇ우
			{
				q1.push(y);
				visited_bfs[y] = 1;
			}
		}
	}
}
int main()
{
	int n, m, v;
	cin >> n >> m >> v;
	for (int i = 0; i < m; i++)
	{
		int a, b;
		cin >> a >> b;
		v1[a].push_back(b);
		v1[b].push_back(a);
	}
	for (int i = 1; i <= n; i++)
	{
		sort(v1[i].begin(), v1[i].end());
	}
	dfs(v);
	bfs(v);
	for (int i = 0; i < result_dfs.size(); i++)
	{
		cout << result_dfs[i] << " ";
	}
	cout << "\n";
	for (int i = 0; i < result_bfs.size(); i++)
	{
		cout << result_bfs[i] << " ";
	}
	return 0;
}

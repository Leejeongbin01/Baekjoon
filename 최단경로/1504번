#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <cstring>
const int INF= 9999999;
using namespace std;

int N, E;
int A, B;
int res = INF;
vector<pair<int, int>> v[801];
int dist[801];
int sToA, sToB, AToB, AToN, BToN;

void fun(int start) {
	priority_queue<pair<int, int>, vector<pair<int, int>>, 
		greater<pair<int, int>>> pq;
	for (int i = 0; i <= N; i++) {
		dist[i] = INF;
	}
	dist[start] = 0;
	pq.push({ 0,start });

	while (!pq.empty()) {
		int cost = pq.top().first;
		int cur = pq.top().second;
		pq.pop();

		for (int i = 0; i < v[cur].size(); i++) {
			int nCost = v[cur][i].second;
			int next = v[cur][i].first;

			if (nCost + cost < dist[next]) {
				dist[next] = nCost + cost;
				pq.push({ dist[next],next });
			}
		}
	}
}

int main() {
	cin >> N >> E;

	for (int i = 0; i < E; i++) {
		int a, b, c;
		cin >> a >> b >> c;

		v[a].push_back({ b,c });
		v[b].push_back({ a,c });
	}

	cin >> A>>B;
	fun(1);
	sToA = dist[A];
	sToB = dist[B];

	fun(A);
	AToB = dist[B];
	AToN = dist[N];

	fun(B);
	BToN = dist[N];


	res = min(res, sToA + AToB + BToN);
	res = min(res, sToB + AToB + AToN);

	if (AToB == INF || res == INF) {
		cout << -1;
	}
	else {
		cout << res;
	}
	return 0;
}
